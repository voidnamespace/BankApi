// <auto-generated />
using System;
using BankApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("BankApi.Entities.BankCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BankCards");
                });

            modelBuilder.Entity("BankApi.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FromCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ToCardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FromCardId");

                    b.HasIndex("ToCardId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TransactionTransaction", b =>
                {
                    b.Property<Guid>("TransactionsFromId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionsToId")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionsFromId", "TransactionsToId");

                    b.HasIndex("TransactionsToId");

                    b.ToTable("TransactionTransaction");
                });

            modelBuilder.Entity("BankApi.Entities.BankCard", b =>
                {
                    b.HasOne("BankApi.Entities.Client", "Client")
                        .WithMany("BankCards")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("BankApi.Entities.BankCard", "FromCard")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("FromCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BankApi.Entities.BankCard", "ToCard")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ToCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromCard");

                    b.Navigation("ToCard");
                });

            modelBuilder.Entity("TransactionTransaction", b =>
                {
                    b.HasOne("Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApi.Entities.BankCard", b =>
                {
                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });

            modelBuilder.Entity("BankApi.Entities.Client", b =>
                {
                    b.Navigation("BankCards");
                });
#pragma warning restore 612, 618
        }
    }
}
